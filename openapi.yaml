openapi: 3.0.0
info:
  title: User API
  version: 1.0.0
description: API for managing users and authentication
servers:
  - url: http://localhost:3001

paths:
  /user:
    get:
      tags:
        - user
      summary: Get a user
      description: Retrieve a user by Bearer token.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response

    post:
      tags:
        - user
      summary: Create a new user
      description: Create a new user with email, username, password, surname, name, and paypal.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - username
                - password
                - surname
                - name
                - paypal
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
                surname:
                  type: string
                name:
                  type: string
                paypal:
                  type: string
              example:
                email: "spider@web.de"
                username: "spiderman"
                password: "passwort123"
                surname: "Parker"
                name: "Peter"
                paypal: "spider@web.de"
      responses:
        '201':
          description: User created

  /user/newMember:
    put:
      tags:
        - user
      summary: Add a new member to a WG
      description: Add a new member to a WG using Bearer token and wgid.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - wgid
              properties:
                wgid:
                  type: string
              example:
                wgid: "1234-wg-id"
      responses:
        '200':
          description: Member added to WG

  /user/removeMember:
    delete:
      tags:
        - user
      summary: Remove a user from a WG
      description: Remove a user from a WG using Bearer token.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Member removed from WG

  /user/update:
    put:
      tags:
        - user
      summary: Update a user
      description: Update user details using auth.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: "New username for the user"
              example:
                username: "Spidy"
      responses:
        '200':
          description: User updated

  /auth/login:
    post:
      tags:
        - auth
      summary: User login
      description: Log in a user using email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
              example:
                email: "spider@web.de"
                password: "passwort123"
      responses:
        '200':
          description: Login successful
        '401':
          description: Unauthorized

  /auth/token:
    post:
      tags:
        - auth
      summary: Get a new token
      description: Get a new token using Bearer authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token generated
        '401':
          description: Unauthorized

  /wg:
    post:
      tags:
        - wg
      summary: Create a WG
      description: Create a WG with name, description, and rules. User ID is determined from Bearer token.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
                - rules
              properties:
                name:
                  type: string
                description:
                  type: string
                rules:
                  type: string
              example:
                name: "Test WG"
                description: "Wir sind toll"
                rules: "Keine Haustiere"
      responses:
        '201':
          description: WG created

    get:
      tags:
        - wg
      summary: Get WG details
      description: Retrieve WG details.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
  /wg/invite:
    get:
      tags:
        - wg
      summary: Invite a user to a WG
      description: Send an invite to a user to join a WG. Requires Bearer token for authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
              example:
                email: "invitee@example.com"
      responses:
        '200':
          description: Invitation sent
        '401':
          description: Unauthorized      

  /todo:
    post:
      tags:
        - todos
      summary: Create a new todo
      description: Create a new todo with title, description, frequency, user IDs, and start date.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - frequenz
                - ids
                - startdate
              properties:
                title:
                  type: string
                description:
                  type: string
                frequenz:
                  type: string
                ids:
                  type: array
                  items:
                    type: string
                startdate:
                  type: string
                  format: date
              example:
                title: "Test1"
                description: "Selbsterklärend"
                frequenz: "3"
                ids: ["40705658-e5cb-431c-b99a-d5f8c4b70818", "8d4c1112-4954-42b7-a77d-5ad7bd516160"]
                startdate: "2023-12-30"
      responses:
        '201':
          description: Todo created

    get:
      tags:
        - todos
      summary: Get a list of todos
      description: Retrieve a list of todos.
      security:
        - bearerAuth: []  # Hinzufügen des Bearer Tokens
      responses:
        '200':
          description: List of todos

  /todo/{todoid}:
    get:
      tags:
        - todos
      summary: Get a single todo
      description: Retrieve details of a specific todo by its ID.
      parameters:
        - name: todoid
          in: path
          required: true
          description: Unique ID of the todo
          schema:
            type: string
      security:
        - bearerAuth: []  # Hinzufügen des Bearer Tokens
      responses:
        '200':
          description: Details of the todo


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
